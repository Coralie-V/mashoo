$color-white: #ffffff;
$color-black: #000000;
$color-thunderbird: #BF2720;
$color-black-green: #041F18;
$color-blue-light: #6A999D;

// Les typographies
@import url("https://fonts.googleapis.com/css2?family=Staatliches&display=swap");
@import url("https://fonts.googleapis.com/css2?family=Outfit:wght@100;200;300;400;500;600&display=swap");
$fontFamilyText: "Outfit", sans-serif;
$fontFamilyTitre: "Staatliches", sans-serif;

// Tailles de typographiques desktop

$fontSizeH1: 2.7rem;
$fontSizeH2: 2.2rem;
$fontSizeText: 1.3rem;
$fontSizeNav: 16px;

a {
  font-family: $fontFamilyText;
}

// Les couleurs

$grisclair: #f4f4f4;
$gris: rgb(134, 134, 134);
$blanc: white;
$bleuFonce: #4c14e9;
$bleuClair: #398def;
$noir: #000000;
$rouge: #eb3e3e;
$orange: #f47e3c;
$jaune: #fddc2f;
$vert: #34a853;
$violet: #8418c7;
$violetfonce : #591e7e;
$degradeVioletBleu : linear-gradient(0deg, rgba(198,40,174,1) 0%, rgba(76,20,233,1) 100%);
$degradeJauneRouge : linear-gradient(190deg, rgba(243,225,56,1) 8%, rgba(235,145,62,1) 55%, rgba(233,52,52,1) 100%);
$degradeBleuRoseRouge : linear-gradient(90deg, rgba(28,212,252,1) 0%, rgba(198,40,174,1) 44%, rgba(232,25,25,1) 100%);


$screen-breakpoints : (
    xxxs    : 320px, // rarely used, most styles applicable here will not use a media query (mobile first)
    xxs     : 375px,
    xs     : 450px,
    s      : 768px,
    m      : 1024px,
    l      : 1200px,
    xl     : 1400px,
    xxl    : 1600px
);

/* ========

   Mixins

 ======== */

@mixin min-width($breakpoint-name, $extra : null) {
    @if (map-has-key($screen-breakpoints, $breakpoint-name)) {

        @if ($extra) {

            @media screen and (min-width: map-get($screen-breakpoints, $breakpoint-name)) and #{$extra} {
                @content;
            }

        } @else {

            @media screen and (min-width: map-get($screen-breakpoints, $breakpoint-name)) {
                @content;
            }
        }
    }
}

@mixin max-width($breakpoint-name, $extra: null) {
    @if (map-has-key($screen-breakpoints, $breakpoint-name)) { // Check breakpoint exists

        @if ($extra) {
            @media screen and (max-width: map-get($screen-breakpoints, $breakpoint-name)) and #{$extra} {
                @content;
            }
        } @else {
            @media screen and (max-width: map-get($screen-breakpoints, $breakpoint-name)) {
                @content;
            }
        }
    }
}

@mixin max-width($breakpoint-name, $extra: null) {
    @if (map-has-key($screen-breakpoints, $breakpoint-name)) { // Check breakpoint exists

        @if ($extra) {
            @media screen and (max-width: map-get($screen-breakpoints, $breakpoint-name)) and #{$extra} {
                @content;
            }
        } @else {
            @media screen and (max-width: map-get($screen-breakpoints, $breakpoint-name)) {
                @content;
            }
        }
    }
}


@mixin aspect-ratio($ratio-or-width, $height: null) {
    $padding: if($height, percentage($height/$ratio-or-width), percentage(1/$ratio-or-width));
    &:before {
        content: '';
        display: block;
        float: left;
        padding-bottom: $padding;
    }
    &:after {
        content: '';
        display: table;
        clear: both;
    }
}


/* ========

   Easing

 ======== */


$easeInSine: cubic-bezier(0.47, 0, 0.745, 0.715);
$easeOutSine: cubic-bezier(0.39, 0.575, 0.565, 1);
$easeInOutSine: cubic-bezier(0.39, 0.575, 0.565, 1);

$easeInQuad: cubic-bezier(0.55, 0.085, 0.68, 0.53);
$easeOutQuad: cubic-bezier(0.25, 0.46, 0.45, 0.94);
$easeInOutQuad: cubic-bezier(0.25, 0.46, 0.45, 0.94);

$easeInCubic: cubic-bezier(0.55, 0.055, 0.675, 0.19);
$easeOutCubic: cubic-bezier(0.215, 0.61, 0.355, 1);
$easeInOutCubic: cubic-bezier(0.215, 0.61, 0.355, 1);

$easeInQuart: cubic-bezier(0.895, 0.03, 0.685, 0.22);
$easeOutQuart: cubic-bezier(0.165, 0.84, 0.44, 1);
$easeInOutQuart: cubic-bezier(0.165, 0.84, 0.44, 1);

$easeInQuint: cubic-bezier(0.755, 0.05, 0.855, 0.06);
$easeOutQuint: cubic-bezier(0.23, 1, 0.32, 1);
$easeInOutQuint: cubic-bezier(0.23, 1, 0.32, 1);

$easeInExpo: cubic-bezier(0.95, 0.05, 0.795, 0.035);
$easeOutExpo: cubic-bezier(0.19, 1, 0.22, 1);
$easeInOutExpo: cubic-bezier(0.19, 1, 0.22, 1);

$easeInCirc: cubic-bezier(0.6, 0.04, 0.98, 0.335);
$easeOutCirc: cubic-bezier(0.075, 0.82, 0.165, 1);
$easeInOutCirc: cubic-bezier(0.075, 0.82, 0.165, 1);

$easeInBack: cubic-bezier(0.6, -0.28, 0.735, 0.045);
$easeOutBack: cubic-bezier(0.175, 0.885, 0.32, 1.275);
$easeInOutBack: cubic-bezier(0.68, -0.55, 0.265, 1.55);

$easeInOutFast: cubic-bezier(1,0,0,1);

$authenticMotion: cubic-bezier(.4,0,.2,1);
$magikMotion: cubic-bezier(0.645,.045,.355,1);
